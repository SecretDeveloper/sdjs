//     sd.js 0.0.1
//     https://github.com/SecretDeveloper/sdjs
//     (c) 2013-2013 Gary Kenneally
//     sdjs may be freely distributed under the MIT license.


(function() {
	
	// get the root object running this instance.
	var root = this;
	
	// 
	var sd = function(obj){
		if(obj instanceof sd) return obj; 
		if(!(this instanceof sd)) return new sd(obj);	
		this._sd = obj;
	};
	
	root.sd = sd;
	
	var _fibonacci = _.memoize(function(n) {
      return n < 2 ? n : _fibonacci(n - 1) + _fibonacci(n - 2);
    });
	
	var fibonacci = function(stack, n) {
      return n < 2 ? n : stack[n - 1] + stack[n - 2];
    };
	
	
	/*	
		If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
		The sum of these multiples is 23.
		Find the sum of all the multiples of 3 or 5 below 1000.
	*/
	sd.problem1 = function(){
		return _.reduce(_.range(0,1000), function(memo, number){		
			if( number%3===0 || number%5==0) return memo+number;
			return memo;}
		);		
	};
	
	
	/*
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	*/
	sd.problem2 = function(){
		var stack = [];	
		var max = 4000000;
		
		var current = 1;
		var last = 1;		
		
		var result = 0;
		
		while(current < max){			
			var tmp = current;
			current = current+last;
			last = tmp;
			
			console.log(current);
			if(current % 2 ===0) result += current;
		}
		return result;
	};
	
	
	
	

}).call(this);